{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 2,
  "id": 3,
  "iteration": 1637674991705,
  "links": [],
  "panels": [
    {
      "datasource": "${datasource}",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepBefore",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "watth"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "HC for year"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "HC"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "HC for day"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "dark-green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "HP for year"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "HP"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "HP for day"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total for year"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "light-purple",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "purple",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Total for day"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "semi-dark-purple",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 6,
      "interval": null,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "mean",
            "max",
            "last"
          ],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        }
      },
      "targets": [
        {
          "hide": true,
          "query": "lData=from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and (\n                r._field =~ /consumption_.*_index/\n                or\n                r._field    == \"totalConsumption\"\n            )\n        )\n\n\nlData\n    |>  filter(\n            fn: (r) =>\n                r._field    == \"totalConsumption\"\n        )\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"Total for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"total\")\n\n\nlData\n    |>  filter(\n            fn: (r) =>\n                r._field    == \"consumption_HP_index\"\n        )\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"HP\" // for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"HP\")\n\n\nlData\n    |>  filter(\n            fn: (r) =>\n                r._field    == \"consumption_HC_index\"\n        )\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"HC\" // for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"HC\")",
          "refId": "A"
        },
        {
          "hide": false,
          "query": "lData=from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and (\n                r._field    == \"totalConsumption\"\n            )\n        )\n\n    |>  aggregateWindow(\n            every: v.windowPeriod,\n            fn: mean,\n            createEmpty: ${aggregation_createEmpty}\n        )\n\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"Total\" // for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"total\")\n",
          "refId": "total"
        },
        {
          "hide": false,
          "query": "from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and (\n                r._field == \"consumption_HP_index\"\n            )\n        )\n\n    |>  aggregateWindow(\n            every: v.windowPeriod,\n            fn: mean,\n            createEmpty: ${aggregation_createEmpty}\n        )\n\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"HP\" // for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"HP\")\n",
          "refId": "HP"
        },
        {
          "hide": false,
          "query": "from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and (\n                r._field ==\"consumption_HC_index\"\n            )\n        )\n\n    |>  aggregateWindow(\n            every: v.windowPeriod,\n            fn: mean,\n            createEmpty: ${aggregation_createEmpty}\n        )\n\n    |>  map(\n            fn: (r) => (\n                {\n                    _value: r._value,\n                    _time: r._time,\n                    //_field: r.host + \" / \" + r._measurement + \"::\" + r._field\n                    _field: \"HC\" // for \" + r.period\n                }\n            )\n        )\n    |>  yield(name: \"HC\")",
          "refId": "HC"
        }
      ],
      "title": "kWh",
      "type": "timeseries"
    },
    {
      "datasource": "${datasource}",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepBefore",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/HC/"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/HP/"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 24,
        "x": 0,
        "y": 10
      },
      "id": 5,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "mean",
            "max",
            "last",
            "sum"
          ],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        }
      },
      "targets": [
        {
          "query": "from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and\n                r._field =~ /^.*bill+.*/\n        )\n\n    |>  aggregateWindow(\n            every: v.windowPeriod,\n            fn: sum,\n            createEmpty: ${aggregation_createEmpty}\n        )",
          "refId": "A"
        }
      ],
      "title": "Bill",
      "type": "timeseries"
    },
    {
      "datasource": "${datasource}",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "lineInterpolation": "stepAfter",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "currencyEUR"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/HC/"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byRegexp",
              "options": "/HP/"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "yellow",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 24,
        "x": 0,
        "y": 17
      },
      "id": 4,
      "options": {
        "legend": {
          "calcs": [
            "min",
            "mean",
            "max",
            "last"
          ],
          "displayMode": "table",
          "placement": "bottom"
        },
        "tooltip": {
          "mode": "multi"
        }
      },
      "targets": [
        {
          "query": "from(bucket: \"${bucket}\")\n    |>  range(start: v.timeRangeStart, stop:v.timeRangeStop)\n    |>  filter(\n            fn: (r) =>\n                r._measurement == \"${measurement_history}\"\n            and\n                r.period =~ /^${period:regexp}+$/\n            and\n                r._field =~ /^.*priceindex+.*/\n        )\n\n    |>  aggregateWindow(\n            every: v.windowPeriod,\n            fn: mean,\n            createEmpty: ${aggregation_createEmpty}\n        )",
          "refId": "A"
        }
      ],
      "title": "Price index",
      "type": "timeseries"
    }
  ],
  "refresh": "10s",
  "schemaVersion": 30,
  "style": "dark",
  "tags": [
    "atome",
    "github.com/Aloike/python-gtw-atome-influxdb2",
    "history",
    "electricity",
    "power",
    "provisioned"
  ],
  "templating": {
    "list": [
      {
        "description": "Name of the InfluxDB bucket containing Atome data.",
        "error": null,
        "hide": 2,
        "label": null,
        "name": "bucket",
        "query": "atome",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "allValue": null,
        "current": {
          "selected": false,
          "text": "month",
          "value": "month"
        },
        "datasource": "${datasource}",
        "definition": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"period\")",
        "description": null,
        "error": null,
        "hide": 0,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "period",
        "options": [],
        "query": "import \"influxdata/influxdb/schema\"\n\nschema.tagValues(bucket: \"${bucket}\", tag: \"period\")",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      },
      {
        "description": "Name of the measurement containing history data.",
        "error": null,
        "hide": 2,
        "label": null,
        "name": "measurement_history",
        "query": "atome_history",
        "skipUrlSync": false,
        "type": "constant"
      },
      {
        "current": {
          "selected": false,
          "text": "demo-atome-svc-database/atome-Flux",
          "value": "demo-atome-svc-database/atome-Flux"
        },
        "description": null,
        "error": null,
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "datasource",
        "options": [],
        "query": "influxdb",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "allValue": null,
        "current": {
          "selected": true,
          "text": "No",
          "value": "false"
        },
        "description": "Create empty data points when aggregating data.",
        "error": null,
        "hide": 0,
        "includeAll": false,
        "label": "Create empty",
        "multi": false,
        "name": "aggregation_createEmpty",
        "options": [
          {
            "selected": false,
            "text": "Yes",
            "value": "true"
          },
          {
            "selected": true,
            "text": "No",
            "value": "false"
          }
        ],
        "query": "Yes : true, No : false",
        "queryValue": "",
        "skipUrlSync": false,
        "type": "custom"
      }
    ]
  },
  "time": {
    "from": "now-30d",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Atome History",
  "uid": "atome-history",
  "version": 10001
}
